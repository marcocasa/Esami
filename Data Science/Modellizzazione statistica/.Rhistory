Sys.getlocale()
Sys.setenv(LANG = "it")
2+3
2+x
Sys.setenv(LANG = "it")
Sys.setenv(LANG = "it")
Sys.setenv(LANG = "IT")
library(tinytex)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(1:9, nrow = 3, ncol = 3)
ATA
A <- matrix(1:9, nrow = 3, ncol = 3)
ATA <- t(A) %*% A
ATA
eigenATA <- eigen(ATA)
eigenATA
eigenVecAAT <- eigenAAT$vectors
eigenATA <- eigen(ATA)
eigenValAAT <- eigenAAT$values
eigenAAT <- eigen(AAT)
AAT <- A %*% t(A)
eigenAAT <- eigen(AAT)
eigenValAAT <- eigenAAT$values
eigenVecAAT <- eigenAAT$vectors
eigenValAAT
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8, 3), 2, 5, byrow=TRUE)
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8, 3), 2, 5, byrow=TRUE)
ATA <- t(A) %*% A
AAT <- A %*% t(A)
eigenATA <- eigen(ATA)
eigenValATA <- eigenATA$values
eigenVecATA <- eigenATA$vectors
eigenAAT <- eigen(AAT)
eigenValAAT <- eigenAAT$values
eigenVecAAT <- eigenAAT$vectors
eigenValAAT
eigenVecAAT
dim(A)
dim(A)$0
dim(A)[0]
nrow(A)
U <- matrix(0, nrow(A), ncol(A))
A
U
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
U
eigenVecAAT
eigenValATA
eigenValAAT
sigmas <- sqrt(eigenValATA)
SigmaK <- sigmas * diag(length(sigmas))
SigmaK
Sigma[0:nrow(SigmaK), 0:ncol(SigmaK) <- SigmaK
Sigma[0:nrow(SigmaK), 0:ncol(SigmaK)] <- SigmaK
SigmaK <- sigmas * diag(length(sigmas))
Sigma[0:nrow(SigmaK), 0:ncol(SigmaK)] <- SigmaK
Sigma[] <- SigmaK
Sigma[0:nrow(SigmaK), 0:ncol(SigmaK)] <- SigmaK
Sigma <- matrix(0, nrow(A), ncol(A))
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
V[0:nrow(eigenVecATA), 0:ncol(eigenVecATA)] <- eigenVecATA
sigmas <- sqrt(eigenValATA)
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8, 3), 2, 5, byrow=TRUE)
ATA <- t(A) %*% A
AAT <- A %*% t(A)
#Per V
eigenATA <- eigen(ATA)
eigenValATA <- eigenATA$values
eigenVecATA <- eigenATA$vectors
#Gli autovalori sono ritornati in ordine decrescente ed ogni colonna della matrice degli autovettori corrisponde ad un autovettore
#Per U
eigenAAT <- eigen(AAT)
eigenValAAT <- eigenAAT$values
eigenVecAAT <- eigenAAT$vectors
nrow(A)
U <- matrix(0, nrow(A), nrow(A))
V <- matrix(0, ncol(A), ncol(A))
Sigma <- matrix(0, nrow(A), ncol(A))
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
V[0:nrow(eigenVecATA), 0:ncol(eigenVecATA)] <- eigenVecATA
sigmas <- sqrt(eigenValATA)
SigmaK <- sigmas * diag(length(sigmas))
Sigma[0:nrow(SigmaK), 0:ncol(SigmaK)] <- SigmaK
Sigma
Sigma[0:, 0:ncol(Sigma)] <- SigmaK[0:, 0:ncol(Sigma)]
Sigma[, 0:ncol(Sigma)] <- SigmaK[, 0:ncol(Sigma)]
Sigma[0:nrow(Sigma), 0:nrow(Sigma)] <- SigmaK[0:nrow(Sigma), 0:nrow(Sigma)]
Sigma
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8, 3), 2, 5, byrow=TRUE)
ATA <- t(A) %*% A
AAT <- A %*% t(A)
#Per V
eigenATA <- eigen(ATA)
eigenValATA <- eigenATA$values
eigenVecATA <- eigenATA$vectors
#Gli autovalori sono ritornati in ordine decrescente ed ogni colonna della matrice degli autovettori corrisponde ad un autovettore
#Per U
eigenAAT <- eigen(AAT)
eigenValAAT <- eigenAAT$values
eigenVecAAT <- eigenAAT$vectors
nrow(A)
U <- matrix(0, nrow(A), nrow(A))
V <- matrix(0, ncol(A), ncol(A))
Sigma <- matrix(0, nrow(A), ncol(A))
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
V[0:nrow(eigenVecATA), 0:ncol(eigenVecATA)] <- eigenVecATA
sigmas <- sqrt(eigenValATA)
SigmaK <- sigmas * diag(length(sigmas))
Sigma
Sigma[0:nrow(Sigma), 0:nrow(Sigma)] <- SigmaK[0:nrow(Sigma), 0:nrow(Sigma)]
Sigma
sigmas
C <- U%*%Sigma%*%t(A)
C
C <- (U%*%Sigma)%*%t(A)
C
dim(U)
dim(V)
dim(Sigma)
U <- matrix(0, nrow(A), nrow(A))
V <- matrix(0, ncol(A), ncol(A))
Sigma <- matrix(0, nrow(A), ncol(A))
dim(U)
dim(V)
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
V[0:nrow(eigenVecATA), 0:ncol(eigenVecATA)] <- eigenVecATA
dim(U)
dim(V)
sigmas <- sqrt(eigenValATA)
SigmaK <- sigmas * diag(length(sigmas))
Sigma
Sigma[0:nrow(Sigma), 0:nrow(Sigma)] <- SigmaK[0:nrow(Sigma), 0:nrow(Sigma)]
dim(U)
dim(V)
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8, 3), 2, 5, byrow=TRUE)
ATA <- t(A) %*% A
AAT <- A %*% t(A)
#Per V
eigenATA <- eigen(ATA)
eigenValATA <- eigenATA$values
eigenVecATA <- eigenATA$vectors
#Gli autovalori sono ritornati in ordine decrescente ed ogni colonna della matrice degli autovettori corrisponde ad un autovettore
#Per U
eigenAAT <- eigen(AAT)
eigenValAAT <- eigenAAT$values
eigenVecAAT <- eigenAAT$vectors
nrow(A)
U <- matrix(0, nrow(A), nrow(A))
V <- matrix(0, ncol(A), ncol(A))
Sigma <- matrix(0, nrow(A), ncol(A))
U[0:nrow(eigenVecAAT), 0:ncol(eigenVecAAT)] <- eigenVecAAT
V[0:nrow(eigenVecATA), 0:ncol(eigenVecATA)] <- eigenVecATA
sigmas <- sqrt(eigenValATA)
SigmaK <- sigmas * diag(length(sigmas))
Sigma
Sigma[0:nrow(Sigma), 0:nrow(Sigma)] <- SigmaK[0:nrow(Sigma), 0:nrow(Sigma)]
dim(U)
dim(V)
dim(Sigma)
C
C <- U%*%Sigma%*%t(V)
dim(C)
C
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("images/svd_rappresentazione.png")
knitr::include_graphics("images/thin_svd_rappresentazione.png")
install.packages("tikzDevice")
knitr::opts_chunk$set(echo = TRUE)
#Gli autovalori sono ritornati in ordine decrescente ed ogni colonna della matrice degli autovettori corrisponde ad un autovettore
#Per U
eigenAAT <- eigen(AAT)
#Gli autovalori sono ritornati in ordine decrescente ed ogni colonna della matrice degli autovettori corrisponde ad un autovettore
#Per U
eigenAAT <- eigen(AAT)
eigenVecATA
eigenATA
print(A)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
typeof(SVD)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pixmap")
library(pixmap)
detach("package:pixmap", unload = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
install.packages("jpeg")
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
nrow(lion)
lion <- readJPEG('images\foto.jpg')
ncol(lion)
nrow(lion)
lion <- readJPEG('images\foto.jpg')
ncol(lion)
nrow(lion)
lion <- readJPEG('images\foto.jpg')
lion <- readJPEG('images\wsw')
lion <- readJPEG('images/foto.jpg')
ncol(lion)
nrow(lion)
b <- lion[,,3]
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
for (r in ranks) {
a <- sapply(rgb.svds, function(i) {
foto.compress <- i$u[,1:r] %*% diag(i$d[1:r]) %*% t(i$v[,1:r])
}, simplify = 'array')
writeJPEG(a, paste('foto_compresse/foto_compresse_con_rank_', r, '.jpg', sep=''))
}
for (r in ranks) {
a <- sapply(rgb.svds, function(i) {
foto.compress <- i$u[,1:r] %*% diag(i$d[1:r]) %*% t(i$v[,1:r])
}, simplify = 'array')
writeJPEG(a, paste('/images/foto_compresse/foto_compresse_con_rank_', r, '.jpg', sep=''))
}
rgb.svds <- list(foto.r.svd, foto.g.svd, foto.b.svd)
ranks <- c(3, 5, 10, 25, 35, 70, 100)
for (r in ranks) {
a <- sapply(rgb.svds, function(i) {
foto.compress <- i$u[,1:r] %*% diag(i$d[1:r]) %*% t(i$v[,1:r])
}, simplify = 'array')
writeJPEG(a, paste('images/foto_compresse/foto_compresse_con_rank_', r, '.jpg', sep=''))
}
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
source("D:/Users/marco/Dropbox/universita/magistrale/primo anno/modellizzazione statistica/esame/esame modellizzazione statistica/DA CANCELLARE.R", echo=TRUE)
fileSize('/images/foto.jpg', units = "B")
ciao <- file.info('/images/foto.jpg')
ciao
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ciao <- file.size('/images/foto.jpg')
ciao
ciao <- file.size('\images\foto.jpg')
ciao
source("~/.active-rstudio-document", echo=TRUE)
ciao <- file.size(dir())
ciao
ciao <- file.size(dir(/images))
ciao <- file.size(dir("/images"))
ciao
ciao <- file.size("//images//foto.jpg")
ciao
source("~/.active-rstudio-document", echo=TRUE)
ciao <- file.size("./images/foto.jpg")
ciao
ciao <- file.size("./images/foto1.jpg")
ciao
ciao <- file.size("./images/foto.jpg")
ciao
ciao/1024
